import React, { Component, Fragment } from 'react';
import PropTypes from 'prop-types';
import ReactDOM from 'react-dom';
import { Transition, TransitionGroup } from 'react-transition-group';

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();







var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};



var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};









var objectWithoutProperties = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};



















var toConsumableArray = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  } else {
    return Array.from(arr);
  }
};

var AlertContainer = function AlertContainer(defaultOptions) {
  var _this = this;

  classCallCheck(this, AlertContainer);

  this.show = function () {
    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var id = new Date().getTime();
    var alertOptions = _extends({}, _this.defaultOptions, options);

    var alert = {
      id: id,
      message: message,
      options: alertOptions
    };

    alert.close = function () {
      return _this.remove(alert);
    };

    if (alert.options.timeout) {
      setTimeout(function () {
        _this.remove(alert);
      }, alert.options.timeout);
    }

    _this.alerts.push(alert);
    _this._broadcastToFirstListner();

    alert.options.onOpen && alert.options.onOpen();

    return alert;
  };

  this.remove = function (alert) {
    var lengthBeforeRemove = _this.alerts.length;
    _this.alerts = _this.alerts.filter(function (a) {
      return a.id !== alert.id;
    });

    if (lengthBeforeRemove > _this.alerts.length) {
      _this._broadcastToFirstListner();
      alert.options.onClose && alert.options.onClose();
    }
  };

  this.success = function () {
    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    options.type = 'success';
    return _this.show(message, options);
  };

  this.error = function () {
    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    options.type = 'error';
    return _this.show(message, options);
  };

  this.info = function () {
    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    options.type = 'info';
    return _this.show(message, options);
  };

  this._getAlerts = function () {
    return _this.alerts;
  };

  this._broadcastToFirstListner = function () {
    _this.listners.length && _this.listners[0](_this.alerts);
  };

  this._subscribe = function (listener) {
    _this.listners.push(listener);
  };

  this._unsubscribe = function (listener) {
    _this.listners = _this.listners.filter(function (item) {
      return item !== listener;
    });
  };

  this.defaultOptions = defaultOptions;
  this.listners = [];
  this.alerts = [];
};

var Broadcast = function (_Component) {
  inherits(Broadcast, _Component);

  function Broadcast() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, Broadcast);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = Broadcast.__proto__ || Object.getPrototypeOf(Broadcast)).call.apply(_ref, [this].concat(args))), _this), _this.alertContainer = new AlertContainer(_this.props.options), _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(Broadcast, [{
    key: 'getChildContext',
    value: function getChildContext() {
      var _props = this.props,
          alertRoot = _props.alertRoot,
          alertTemplate = _props.alertTemplate,
          options = _props.options;


      return {
        alertContainer: this.alertContainer,
        alertRoot: alertRoot,
        alertTemplate: alertTemplate,
        options: options
      };
    }
  }, {
    key: 'render',
    value: function render() {
      return this.props.children;
    }
  }]);
  return Broadcast;
}(Component);

Broadcast.displayName = 'AlertsBroadcast';
Broadcast.propTypes = {
  alertRoot: PropTypes.object.isRequired,
  alertTemplate: PropTypes.oneOfType([PropTypes.element, PropTypes.func]).isRequired,
  options: PropTypes.object.isRequired
};
Broadcast.childContextTypes = {
  alertContainer: PropTypes.object.isRequired,
  alertRoot: PropTypes.object.isRequired,
  alertTemplate: PropTypes.oneOfType([PropTypes.element, PropTypes.func]).isRequired,
  options: PropTypes.object.isRequired
};

var Provider = function (_Component) {
  inherits(Provider, _Component);

  function Provider() {
    var _ref;

    var _temp, _this, _ret;

    classCallCheck(this, Provider);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = Provider.__proto__ || Object.getPrototypeOf(Provider)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      isClient: false
    }, _this.alertRootElement = null, _temp), possibleConstructorReturn(_this, _ret);
  }

  createClass(Provider, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.setState({ isClient: true });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      document.body.removeChild(this.alertRootElement);
      this.alertRootElement = null;
    }
  }, {
    key: 'render',
    value: function render() {
      if (this.state.isClient) {
        if (!this.alertRootElement) {
          this.alertRootElement = document.createElement('div');
          document.body.appendChild(this.alertRootElement);
        }
      } else {
        return null;
      }

      var _props = this.props,
          children = _props.children,
          template = _props.template,
          offset = _props.offset,
          position = _props.position,
          timeout = _props.timeout,
          type = _props.type,
          transition = _props.transition,
          zIndex = _props.zIndex;


      return React.createElement(
        Broadcast,
        {
          alertRoot: this.alertRootElement,
          alertTemplate: template,
          options: { offset: offset, position: position, timeout: timeout, type: type, transition: transition, zIndex: zIndex }
        },
        children
      );
    }
  }]);
  return Provider;
}(Component);

Provider.propTypes = {
  offset: PropTypes.string,
  position: PropTypes.oneOf(['top left', 'top right', 'top center', 'bottom left', 'bottom right', 'bottom center']),
  timeout: PropTypes.number,
  type: PropTypes.oneOf(['info', 'success', 'error']),
  transition: PropTypes.oneOf(['fade', 'scale']),
  zIndex: PropTypes.number,
  template: PropTypes.oneOfType([PropTypes.element, PropTypes.func]).isRequired
};
Provider.defaultProps = {
  offset: '10px',
  position: 'top center',
  timeout: 0,
  type: 'info',
  transition: 'fade',
  zIndex: 100
};

var getStyles = function getStyles(_ref) {
  var position = _ref.position,
      zIndex = _ref.zIndex;

  switch (position) {
    case 'top left':
      return {
        position: 'fixed',
        top: 0,
        right: 'auto',
        bottom: 'auto',
        left: 0,
        zIndex: zIndex
      };
    case 'top right':
      return {
        position: 'fixed',
        top: 0,
        right: 0,
        bottom: 'auto',
        left: 'auto',
        zIndex: zIndex
      };
    case 'bottom left':
      return {
        position: 'fixed',
        top: 'auto',
        right: 'auto',
        bottom: 0,
        left: 0,
        zIndex: zIndex
      };
    case 'bottom right':
      return {
        position: 'fixed',
        top: 'auto',
        right: 0,
        bottom: 0,
        left: 'auto',
        zIndex: zIndex
      };
    case 'top center':
      return {
        position: 'fixed',
        top: 0,
        right: 'auto',
        bottom: 'auto',
        left: '50%',
        transform: 'translate(-50%, 0%)',
        zIndex: zIndex
      };
    case 'bottom center':
      return {
        position: 'fixed',
        top: 'auto',
        right: 'auto',
        bottom: 0,
        left: '50%',
        transform: 'translate(-50%, 0%)',
        zIndex: zIndex
      };
  }
};

var AlertWrapper = function (_Component) {
  inherits(AlertWrapper, _Component);

  function AlertWrapper() {
    classCallCheck(this, AlertWrapper);
    return possibleConstructorReturn(this, (AlertWrapper.__proto__ || Object.getPrototypeOf(AlertWrapper)).apply(this, arguments));
  }

  createClass(AlertWrapper, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          props = objectWithoutProperties(_props, ['children']);
      var offset = props.offset,
          position = props.position,
          timeout = props.timeout,
          type = props.type,
          transition = props.transition,
          zIndex = props.zIndex,
          rest = objectWithoutProperties(props, ['offset', 'position', 'timeout', 'type', 'transition', 'zIndex']);


      return React.createElement(
        'div',
        _extends({ style: getStyles(props) }, rest),
        children
      );
    }
  }]);
  return AlertWrapper;
}(Component);

var duration = 250;

var defaultStyle = {
  fade: {
    transition: 'opacity ' + duration + 'ms ease',
    opacity: 0
  },
  scale: {
    transform: 'scale(1)',
    transition: 'all ' + duration + 'ms ease-in-out'
  }
};

var transitionStyles = {
  fade: {
    entering: { opacity: 0 },
    entered: { opacity: 1 }
  },
  scale: {
    entering: { transform: 'scale(0)' },
    entered: { transform: 'scale(1)' },
    exiting: { transform: 'scale(0)' },
    exited: { transform: 'scale(1)' }
  }
};

var AlertTranstion = function AlertTranstion(_ref) {
  var children = _ref.children,
      type = _ref.type,
      props = objectWithoutProperties(_ref, ['children', 'type']);
  return React.createElement(
    Transition,
    _extends({}, props, { timeout: duration }),
    function (state) {
      return React.createElement(
        'div',
        {
          style: _extends({}, defaultStyle[type], transitionStyles[type][state])
        },
        children
      );
    }
  );
};

var withAlert = function withAlert(WrappedComponent) {
  var WithAlert = function (_Component) {
    inherits(WithAlert, _Component);

    function WithAlert() {
      var _ref;

      var _temp, _this, _ret;

      classCallCheck(this, WithAlert);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = possibleConstructorReturn(this, (_ref = WithAlert.__proto__ || Object.getPrototypeOf(WithAlert)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        alerts: []
      }, _this.syncAlerts = function (alerts) {
        _this.setState({ alerts: [].concat(toConsumableArray(alerts)) });
      }, _temp), possibleConstructorReturn(_this, _ret);
    }

    createClass(WithAlert, [{
      key: 'componentWillMount',
      value: function componentWillMount() {
        this.setState({ alerts: [].concat(toConsumableArray(this.context.alertContainer._getAlerts())) });
      }
    }, {
      key: 'componentDidMount',
      value: function componentDidMount() {
        this.context.alertContainer._subscribe(this.syncAlerts);
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        this.context.alertContainer._unsubscribe(this.syncAlerts);
      }
    }, {
      key: 'render',
      value: function render() {
        var _context = this.context,
            alertContainer = _context.alertContainer,
            AlertComponent = _context.alertTemplate,
            alertRoot = _context.alertRoot,
            options = _context.options;


        return React.createElement(
          Fragment,
          null,
          React.createElement(WrappedComponent, _extends({}, this.props, { alert: alertContainer })),
          ReactDOM.createPortal(React.createElement(
            AlertWrapper,
            options,
            React.createElement(
              TransitionGroup,
              null,
              this.state.alerts.map(function (alert) {
                return React.createElement(
                  AlertTranstion,
                  { type: options.transition, key: alert.id },
                  React.createElement(AlertComponent, _extends({
                    style: { margin: options.offset }
                  }, alert))
                );
              })
            )
          ), alertRoot)
        );
      }
    }]);
    return WithAlert;
  }(Component);

  WithAlert.displayName = 'WithAlert(' + (WrappedComponent.displayName || WrappedComponent.name || 'Component') + ')';
  WithAlert.contextTypes = {
    alertContainer: PropTypes.object.isRequired,
    alertRoot: PropTypes.object.isRequired,
    alertTemplate: PropTypes.oneOfType([PropTypes.element, PropTypes.func]).isRequired,
    options: PropTypes.object.isRequired
  };


  return WithAlert;
};

export { Provider, withAlert };
